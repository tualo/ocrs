
bcResult ImageRecognizeEx::barcode_internal_old(cv::Mat &part, bool forceFPCode) {
  _debugTime("start barcode_internal");

  bcResult res = {cv::Point(0,0),cv::Rect(0,0,1,1),std::string(""),std::string(""),false};

  if (part.channels()>1){
    throw std::runtime_error("Error: ImageRecognizeEx::barcode_internal not a gray image");
  }

  zbar::ImageScanner scanner;
  scanner.set_config(zbar::ZBAR_NONE, zbar::ZBAR_CFG_ENABLE, 1);
  scanner.set_config(zbar::ZBAR_CODE128, zbar::ZBAR_CFG_ENABLE, 1);
  scanner.set_config(zbar::ZBAR_CODE128, zbar::ZBAR_CFG_ADD_CHECK, 1);
  scanner.set_config(zbar::ZBAR_CODE128, zbar::ZBAR_CFG_EMIT_CHECK, 0);


  scanner.set_config(zbar::ZBAR_CODE39, zbar::ZBAR_CFG_ENABLE, 1);
  scanner.set_config(zbar::ZBAR_CODE39, zbar::ZBAR_CFG_ADD_CHECK, 1);
  scanner.set_config(zbar::ZBAR_CODE39, zbar::ZBAR_CFG_EMIT_CHECK, 0);


  scanner.set_config(zbar::ZBAR_I25, zbar::ZBAR_CFG_ENABLE, 1);
  scanner.set_config(zbar::ZBAR_I25, zbar::ZBAR_CFG_ADD_CHECK, 1);
  scanner.set_config(zbar::ZBAR_I25, zbar::ZBAR_CFG_EMIT_CHECK, 0);

  try{


    cv::Mat gray;
    cv::Mat norm;
    cv::Mat mask;
    int type = cv::NORM_MINMAX;
    int dtype = -1;
    int min=0;
    int max=255;
    cv::Point point;
    cv::Size ksize(5,5);


    bool codeRetry=false;
    if (showDebug){
      std::cout << "barcode_internal " << std::endl;
    }

    cv::Mat image_clahe;
    if (barcodeClahe==true){
      if (showDebug){
        std::cout << "barcode_internal CLAHE" << std::endl;
      }
      cv::Mat lab_image;
      if (part.channels()==1){
        cv::cvtColor(part, gray, CV_BGR2GRAY);
        cv::cvtColor(gray, lab_image, CV_BGR2Lab);
      }else{
        //cv::cvtColor(part, gray, CV_GRAY2BGR);
        cv::cvtColor(part, lab_image, CV_BGR2Lab);
      }
      // Extract the L channel
      std::vector<cv::Mat> lab_planes(3);
      cv::split(lab_image, lab_planes);  // now we have the L image in lab_planes[0]

      // apply the CLAHE algorithm to the L channel
      cv::Ptr<cv::CLAHE> clahe = cv::createCLAHE();
      clahe->setClipLimit(4);
      cv::Mat dst;
      clahe->apply(lab_planes[0], dst);

      // Merge the the color planes back into an Lab image
      dst.copyTo(lab_planes[0]);
      cv::merge(lab_planes, lab_image);

     // convert back to RGB
     cv::cvtColor(lab_image, image_clahe, CV_Lab2BGR);
    }else{
      image_clahe=part.clone();
    }

    std::cout << "before loop " << "i_bc_thres_stop" << i_bc_thres_stop << std::endl;
    codes="";
    // counting here down
    /*
    for (int thres=i_bc_thres_start;((thres<=i_bc_thres_stop)&&(
      res.found==false && codeRetry==false
    ));thres+=i_bc_thres_step){
      */

      for (int thres=i_bc_thres_stop;((thres>=i_bc_thres_start)&&(
        res.found==false && codeRetry==false
      ));thres-=i_bc_thres_step){

      //std::cout << " loop " << thres << std::endl;

      if (image_clahe.channels()==1){
        cv::threshold(image_clahe,gray,thres,255, CV_THRESH_BINARY );
      }else{
        cv::cvtColor(image_clahe, gray, CV_BGR2GRAY);
      //  cv::threshold(gray,gray,thres,255, CV_THRESH_BINARY );
      }
      //cv::normalize(gray, norm, min, max, type, dtype, mask);
      //cv::GaussianBlur(norm, norm, ksize, 0);




      zbar::Image image(norm.cols, norm.rows, "Y800", (uchar *)norm.data, norm.cols * norm.rows);
      scanner.scan(image);
      for(zbar::Image::SymbolIterator symbol = image.symbol_begin(); symbol != image.symbol_end(); ++symbol) {
        if (showDebug){
          std::cout << "thres " << thres << " Code " << symbol->get_data().c_str() << " Type " << symbol->get_type_name().c_str() << std::endl;
        }
        std::string code = std::string(symbol->get_data().c_str());
        codes += code+" ";
        std::string type = std::string(symbol->get_type_name().c_str());


        if ((code.length()>5) && (code.length() > res.code.length())) {
          if (
            (
              ( (type=="I2/5") && (is_digits(code)) ) ||
              ( (type!="I2/5")  )
            ) && (
              code.substr(0,4) != "0000"
            )
          ){
            if (showDebug){
              std::cout << "Code Length: " << code.length()-1 << std::endl;
            }
            if (type=="I2/5"){
              res.code = code.substr(0,code.length()-1);
              if (code.length()-1<11){

              }else{
                res.found = true;
              }
            }else{
              res.code = code;//std::string(symbol->get_data().c_str());
              res.found = true;
            }
            if (showDebug){
              std::cout << "Code*: "<< res.found << " c:" << res.code << " type:" << type  << std::endl;
            }

            //resultThres = thres;
            res.type = std::string(symbol->get_type_name().c_str());

          }

          if (forceFPCode){
            if ( (type=="I2/5") && (is_digits(code)) && (code.length()-1==11) ){

              res.found = true;
            }else{
              // if code does not match
              res.found = false;
            }
          }

        }
      }
      image.set_data(NULL, 0);
      scanner.recycle_image(image);

      //std::cerr << "barcode_internal (loop) " << res.found << " c:" << code << std::endl;

    }
  }catch(cv::Exception cv_error){
    std::cerr << "barcode_internal()" << cv_error.msg << std::endl;
  }
  std::cerr << "barcode_internal " << res.found << " c:" << code << std::endl;

  _debugTime("stop barcode_internal -----> "+res.code);
  return res;
}
